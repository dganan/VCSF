//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.60310.0
// 
namespace VCS.ConversionService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConversionService.IConversionService")]
    public interface IConversionService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConversionService/GetAvailableCollaborativeSessions", ReplyAction="http://tempuri.org/IConversionService/GetAvailableCollaborativeSessionsResponse")]
        System.IAsyncResult BeginGetAvailableCollaborativeSessions(string dataSource, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<VCS.CollaborativeSessionDescriptor> EndGetAvailableCollaborativeSessions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IConversionService/GetCollaborativeSessionById", ReplyAction="http://tempuri.org/IConversionService/GetCollaborativeSessionByIdResponse")]
        System.IAsyncResult BeginGetCollaborativeSessionById(string id, string dataSource, System.AsyncCallback callback, object asyncState);
        
        VCS.CollaborativeSession EndGetCollaborativeSessionById(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConversionServiceChannel : VCS.ConversionService.IConversionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAvailableCollaborativeSessionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAvailableCollaborativeSessionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<VCS.CollaborativeSessionDescriptor> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<VCS.CollaborativeSessionDescriptor>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCollaborativeSessionByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCollaborativeSessionByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public VCS.CollaborativeSession Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((VCS.CollaborativeSession)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConversionServiceClient : System.ServiceModel.ClientBase<VCS.ConversionService.IConversionService>, VCS.ConversionService.IConversionService {
        
        private BeginOperationDelegate onBeginGetAvailableCollaborativeSessionsDelegate;
        
        private EndOperationDelegate onEndGetAvailableCollaborativeSessionsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAvailableCollaborativeSessionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCollaborativeSessionByIdDelegate;
        
        private EndOperationDelegate onEndGetCollaborativeSessionByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetCollaborativeSessionByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ConversionServiceClient() {
        }
        
        public ConversionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConversionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConversionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConversionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetAvailableCollaborativeSessionsCompletedEventArgs> GetAvailableCollaborativeSessionsCompleted;
        
        public event System.EventHandler<GetCollaborativeSessionByIdCompletedEventArgs> GetCollaborativeSessionByIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult VCS.ConversionService.IConversionService.BeginGetAvailableCollaborativeSessions(string dataSource, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAvailableCollaborativeSessions(dataSource, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<VCS.CollaborativeSessionDescriptor> VCS.ConversionService.IConversionService.EndGetAvailableCollaborativeSessions(System.IAsyncResult result) {
            return base.Channel.EndGetAvailableCollaborativeSessions(result);
        }
        
        private System.IAsyncResult OnBeginGetAvailableCollaborativeSessions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string dataSource = ((string)(inValues[0]));
            return ((VCS.ConversionService.IConversionService)(this)).BeginGetAvailableCollaborativeSessions(dataSource, callback, asyncState);
        }
        
        private object[] OnEndGetAvailableCollaborativeSessions(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<VCS.CollaborativeSessionDescriptor> retVal = ((VCS.ConversionService.IConversionService)(this)).EndGetAvailableCollaborativeSessions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAvailableCollaborativeSessionsCompleted(object state) {
            if ((this.GetAvailableCollaborativeSessionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAvailableCollaborativeSessionsCompleted(this, new GetAvailableCollaborativeSessionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAvailableCollaborativeSessionsAsync(string dataSource) {
            this.GetAvailableCollaborativeSessionsAsync(dataSource, null);
        }
        
        public void GetAvailableCollaborativeSessionsAsync(string dataSource, object userState) {
            if ((this.onBeginGetAvailableCollaborativeSessionsDelegate == null)) {
                this.onBeginGetAvailableCollaborativeSessionsDelegate = new BeginOperationDelegate(this.OnBeginGetAvailableCollaborativeSessions);
            }
            if ((this.onEndGetAvailableCollaborativeSessionsDelegate == null)) {
                this.onEndGetAvailableCollaborativeSessionsDelegate = new EndOperationDelegate(this.OnEndGetAvailableCollaborativeSessions);
            }
            if ((this.onGetAvailableCollaborativeSessionsCompletedDelegate == null)) {
                this.onGetAvailableCollaborativeSessionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAvailableCollaborativeSessionsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAvailableCollaborativeSessionsDelegate, new object[] {
                        dataSource}, this.onEndGetAvailableCollaborativeSessionsDelegate, this.onGetAvailableCollaborativeSessionsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult VCS.ConversionService.IConversionService.BeginGetCollaborativeSessionById(string id, string dataSource, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCollaborativeSessionById(id, dataSource, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        VCS.CollaborativeSession VCS.ConversionService.IConversionService.EndGetCollaborativeSessionById(System.IAsyncResult result) {
            return base.Channel.EndGetCollaborativeSessionById(result);
        }
        
        private System.IAsyncResult OnBeginGetCollaborativeSessionById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            string dataSource = ((string)(inValues[1]));
            return ((VCS.ConversionService.IConversionService)(this)).BeginGetCollaborativeSessionById(id, dataSource, callback, asyncState);
        }
        
        private object[] OnEndGetCollaborativeSessionById(System.IAsyncResult result) {
            VCS.CollaborativeSession retVal = ((VCS.ConversionService.IConversionService)(this)).EndGetCollaborativeSessionById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCollaborativeSessionByIdCompleted(object state) {
            if ((this.GetCollaborativeSessionByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCollaborativeSessionByIdCompleted(this, new GetCollaborativeSessionByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCollaborativeSessionByIdAsync(string id, string dataSource) {
            this.GetCollaborativeSessionByIdAsync(id, dataSource, null);
        }
        
        public void GetCollaborativeSessionByIdAsync(string id, string dataSource, object userState) {
            if ((this.onBeginGetCollaborativeSessionByIdDelegate == null)) {
                this.onBeginGetCollaborativeSessionByIdDelegate = new BeginOperationDelegate(this.OnBeginGetCollaborativeSessionById);
            }
            if ((this.onEndGetCollaborativeSessionByIdDelegate == null)) {
                this.onEndGetCollaborativeSessionByIdDelegate = new EndOperationDelegate(this.OnEndGetCollaborativeSessionById);
            }
            if ((this.onGetCollaborativeSessionByIdCompletedDelegate == null)) {
                this.onGetCollaborativeSessionByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCollaborativeSessionByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetCollaborativeSessionByIdDelegate, new object[] {
                        id,
                        dataSource}, this.onEndGetCollaborativeSessionByIdDelegate, this.onGetCollaborativeSessionByIdCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override VCS.ConversionService.IConversionService CreateChannel() {
            return new ConversionServiceClientChannel(this);
        }
        
        private class ConversionServiceClientChannel : ChannelBase<VCS.ConversionService.IConversionService>, VCS.ConversionService.IConversionService {
            
            public ConversionServiceClientChannel(System.ServiceModel.ClientBase<VCS.ConversionService.IConversionService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetAvailableCollaborativeSessions(string dataSource, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = dataSource;
                System.IAsyncResult _result = base.BeginInvoke("GetAvailableCollaborativeSessions", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<VCS.CollaborativeSessionDescriptor> EndGetAvailableCollaborativeSessions(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<VCS.CollaborativeSessionDescriptor> _result = ((System.Collections.ObjectModel.ObservableCollection<VCS.CollaborativeSessionDescriptor>)(base.EndInvoke("GetAvailableCollaborativeSessions", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCollaborativeSessionById(string id, string dataSource, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = id;
                _args[1] = dataSource;
                System.IAsyncResult _result = base.BeginInvoke("GetCollaborativeSessionById", _args, callback, asyncState);
                return _result;
            }
            
            public VCS.CollaborativeSession EndGetCollaborativeSessionById(System.IAsyncResult result) {
                object[] _args = new object[0];
                VCS.CollaborativeSession _result = ((VCS.CollaborativeSession)(base.EndInvoke("GetCollaborativeSessionById", _args, result)));
                return _result;
            }
        }
    }
}
