//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.60310.0
// 
namespace VCS.SpeechActClassificationService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SpeechActClassificationService.ISpeechActClassificationService")]
    public interface ISpeechActClassificationService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISpeechActClassificationService/GetAllSpeechActs", ReplyAction="http://tempuri.org/ISpeechActClassificationService/GetAllSpeechActsResponse")]
        System.IAsyncResult BeginGetAllSpeechActs(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetAllSpeechActs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISpeechActClassificationService/GetMainSpeechActs", ReplyAction="http://tempuri.org/ISpeechActClassificationService/GetMainSpeechActsResponse")]
        System.IAsyncResult BeginGetMainSpeechActs(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetMainSpeechActs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISpeechActClassificationService/ClassifyText", ReplyAction="http://tempuri.org/ISpeechActClassificationService/ClassifyTextResponse")]
        System.IAsyncResult BeginClassifyText(string text, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndClassifyText(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISpeechActClassificationServiceChannel : VCS.SpeechActClassificationService.ISpeechActClassificationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllSpeechActsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllSpeechActsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMainSpeechActsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMainSpeechActsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClassifyTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClassifyTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SpeechActClassificationServiceClient : System.ServiceModel.ClientBase<VCS.SpeechActClassificationService.ISpeechActClassificationService>, VCS.SpeechActClassificationService.ISpeechActClassificationService {
        
        private BeginOperationDelegate onBeginGetAllSpeechActsDelegate;
        
        private EndOperationDelegate onEndGetAllSpeechActsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllSpeechActsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMainSpeechActsDelegate;
        
        private EndOperationDelegate onEndGetMainSpeechActsDelegate;
        
        private System.Threading.SendOrPostCallback onGetMainSpeechActsCompletedDelegate;
        
        private BeginOperationDelegate onBeginClassifyTextDelegate;
        
        private EndOperationDelegate onEndClassifyTextDelegate;
        
        private System.Threading.SendOrPostCallback onClassifyTextCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public SpeechActClassificationServiceClient() {
        }
        
        public SpeechActClassificationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SpeechActClassificationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpeechActClassificationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpeechActClassificationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetAllSpeechActsCompletedEventArgs> GetAllSpeechActsCompleted;
        
        public event System.EventHandler<GetMainSpeechActsCompletedEventArgs> GetMainSpeechActsCompleted;
        
        public event System.EventHandler<ClassifyTextCompletedEventArgs> ClassifyTextCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult VCS.SpeechActClassificationService.ISpeechActClassificationService.BeginGetAllSpeechActs(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllSpeechActs(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> VCS.SpeechActClassificationService.ISpeechActClassificationService.EndGetAllSpeechActs(System.IAsyncResult result) {
            return base.Channel.EndGetAllSpeechActs(result);
        }
        
        private System.IAsyncResult OnBeginGetAllSpeechActs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((VCS.SpeechActClassificationService.ISpeechActClassificationService)(this)).BeginGetAllSpeechActs(callback, asyncState);
        }
        
        private object[] OnEndGetAllSpeechActs(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((VCS.SpeechActClassificationService.ISpeechActClassificationService)(this)).EndGetAllSpeechActs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllSpeechActsCompleted(object state) {
            if ((this.GetAllSpeechActsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllSpeechActsCompleted(this, new GetAllSpeechActsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllSpeechActsAsync() {
            this.GetAllSpeechActsAsync(null);
        }
        
        public void GetAllSpeechActsAsync(object userState) {
            if ((this.onBeginGetAllSpeechActsDelegate == null)) {
                this.onBeginGetAllSpeechActsDelegate = new BeginOperationDelegate(this.OnBeginGetAllSpeechActs);
            }
            if ((this.onEndGetAllSpeechActsDelegate == null)) {
                this.onEndGetAllSpeechActsDelegate = new EndOperationDelegate(this.OnEndGetAllSpeechActs);
            }
            if ((this.onGetAllSpeechActsCompletedDelegate == null)) {
                this.onGetAllSpeechActsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllSpeechActsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllSpeechActsDelegate, null, this.onEndGetAllSpeechActsDelegate, this.onGetAllSpeechActsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult VCS.SpeechActClassificationService.ISpeechActClassificationService.BeginGetMainSpeechActs(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMainSpeechActs(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> VCS.SpeechActClassificationService.ISpeechActClassificationService.EndGetMainSpeechActs(System.IAsyncResult result) {
            return base.Channel.EndGetMainSpeechActs(result);
        }
        
        private System.IAsyncResult OnBeginGetMainSpeechActs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((VCS.SpeechActClassificationService.ISpeechActClassificationService)(this)).BeginGetMainSpeechActs(callback, asyncState);
        }
        
        private object[] OnEndGetMainSpeechActs(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((VCS.SpeechActClassificationService.ISpeechActClassificationService)(this)).EndGetMainSpeechActs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMainSpeechActsCompleted(object state) {
            if ((this.GetMainSpeechActsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMainSpeechActsCompleted(this, new GetMainSpeechActsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMainSpeechActsAsync() {
            this.GetMainSpeechActsAsync(null);
        }
        
        public void GetMainSpeechActsAsync(object userState) {
            if ((this.onBeginGetMainSpeechActsDelegate == null)) {
                this.onBeginGetMainSpeechActsDelegate = new BeginOperationDelegate(this.OnBeginGetMainSpeechActs);
            }
            if ((this.onEndGetMainSpeechActsDelegate == null)) {
                this.onEndGetMainSpeechActsDelegate = new EndOperationDelegate(this.OnEndGetMainSpeechActs);
            }
            if ((this.onGetMainSpeechActsCompletedDelegate == null)) {
                this.onGetMainSpeechActsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMainSpeechActsCompleted);
            }
            base.InvokeAsync(this.onBeginGetMainSpeechActsDelegate, null, this.onEndGetMainSpeechActsDelegate, this.onGetMainSpeechActsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult VCS.SpeechActClassificationService.ISpeechActClassificationService.BeginClassifyText(string text, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClassifyText(text, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> VCS.SpeechActClassificationService.ISpeechActClassificationService.EndClassifyText(System.IAsyncResult result) {
            return base.Channel.EndClassifyText(result);
        }
        
        private System.IAsyncResult OnBeginClassifyText(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string text = ((string)(inValues[0]));
            return ((VCS.SpeechActClassificationService.ISpeechActClassificationService)(this)).BeginClassifyText(text, callback, asyncState);
        }
        
        private object[] OnEndClassifyText(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((VCS.SpeechActClassificationService.ISpeechActClassificationService)(this)).EndClassifyText(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClassifyTextCompleted(object state) {
            if ((this.ClassifyTextCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClassifyTextCompleted(this, new ClassifyTextCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClassifyTextAsync(string text) {
            this.ClassifyTextAsync(text, null);
        }
        
        public void ClassifyTextAsync(string text, object userState) {
            if ((this.onBeginClassifyTextDelegate == null)) {
                this.onBeginClassifyTextDelegate = new BeginOperationDelegate(this.OnBeginClassifyText);
            }
            if ((this.onEndClassifyTextDelegate == null)) {
                this.onEndClassifyTextDelegate = new EndOperationDelegate(this.OnEndClassifyText);
            }
            if ((this.onClassifyTextCompletedDelegate == null)) {
                this.onClassifyTextCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClassifyTextCompleted);
            }
            base.InvokeAsync(this.onBeginClassifyTextDelegate, new object[] {
                        text}, this.onEndClassifyTextDelegate, this.onClassifyTextCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override VCS.SpeechActClassificationService.ISpeechActClassificationService CreateChannel() {
            return new SpeechActClassificationServiceClientChannel(this);
        }
        
        private class SpeechActClassificationServiceClientChannel : ChannelBase<VCS.SpeechActClassificationService.ISpeechActClassificationService>, VCS.SpeechActClassificationService.ISpeechActClassificationService {
            
            public SpeechActClassificationServiceClientChannel(System.ServiceModel.ClientBase<VCS.SpeechActClassificationService.ISpeechActClassificationService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetAllSpeechActs(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllSpeechActs", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetAllSpeechActs(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetAllSpeechActs", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMainSpeechActs(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetMainSpeechActs", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetMainSpeechActs(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetMainSpeechActs", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginClassifyText(string text, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = text;
                System.IAsyncResult _result = base.BeginInvoke("ClassifyText", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndClassifyText(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("ClassifyText", _args, result)));
                return _result;
            }
        }
    }
}
